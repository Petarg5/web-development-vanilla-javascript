name: Vanilla JS Build

permissions:
  contents: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          # ensure package.json exists (safe to run)
          if [ ! -f package.json ]; then npm init -y; fi
          npm install eslint clean-css-cli terser imagemin-cli --no-audit --no-fund --save-dev

      - name: Run ESLint (non-blocking)
        run: npx eslint . --ext .js || true

      - name: Run build
        run: |
          node scripts/build.js || echo "⚠️ scripts/build.js exited non-zero (build script should handle errors gracefully)."

      - name: Check dist folder
        id: check_dist
        run: |
          if [ -d dist ] && [ "$(ls -A dist)" ]; then
            echo "dist_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dist_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifact (if dist exists)
        if: steps.check_dist.outputs.dist_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.run_number }}-${{ github.sha }}-$(date +'%Y%m%d')
          path: dist

      - name: Create Git Tag (main only)
        if: github.ref == 'refs/heads/main'
        id: create_git_tag
        run: |
          VERSION="v$(date +'%Y.%m.%d-%H%M')"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Automated build $VERSION"
          # Authenticate git push using the GITHUB_TOKEN
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git push origin "$VERSION"

      - name: Zip dist folder
        if: steps.check_dist.outputs.dist_exists == 'true'
        run: zip -r dist.zip dist

      - name: Create GitHub Release (if dist exists)
        if: steps.check_dist.outputs.dist_exists == 'true'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (if release created)
        if: steps.check_dist.outputs.dist_exists == 'true'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Notification (console)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "✅ Build pipeline complete for $GITHUB_REPOSITORY@$GITHUB_SHA"
